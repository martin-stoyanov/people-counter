'use strict';

exports.__esModule = true;
exports.CardContent = exports.CardSubTitle = exports.CardTitle = exports.CardActions = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _recompose = require('recompose');

var _grommet = require('grommet');

var _hocs = require('grommet/components/hocs');

var _doc = require('./doc');

var _doc2 = _interopRequireDefault(_doc);

var _StyledCard = require('./StyledCard');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var CardActions = function CardActions(_ref) {
  var children = _ref.children,
      rest = _objectWithoutProperties(_ref, ['children']);

  return _react2.default.createElement(
    _grommet.Box,
    _extends({ justifySelf: 'end', align: 'center', gap: 'small', pad: 'small', flex: false, fill: 'horizontal', direction: 'row' }, rest),
    children
  );
};

exports.CardActions = CardActions;
var CardTitle = function CardTitle(_ref2) {
  var children = _ref2.children,
      color = _ref2.color,
      size = _ref2.size,
      textAlign = _ref2.textAlign,
      truncate = _ref2.truncate,
      _ref2$level = _ref2.level,
      level = _ref2$level === undefined ? 2 : _ref2$level,
      _ref2$strong = _ref2.strong,
      strong = _ref2$strong === undefined ? true : _ref2$strong,
      _ref2$margin = _ref2.margin,
      margin = _ref2$margin === undefined ? 'none' : _ref2$margin,
      responsive = _ref2.responsive,
      rest = _objectWithoutProperties(_ref2, ['children', 'color', 'size', 'textAlign', 'truncate', 'level', 'strong', 'margin', 'responsive']);

  return _react2.default.createElement(
    _grommet.Box,
    _extends({ responsive: responsive, direction: 'row', align: 'center', justify: 'center', gap: 'small', pad: 'small', flex: false }, rest),
    typeof children !== 'string' ? children : _react2.default.createElement(
      _grommet.Heading,
      {
        level: level,
        margin: margin,
        color: color,
        size: size,
        textAlign: textAlign,
        truncate: truncate,
        responsive: responsive
      },
      strong ? _react2.default.createElement(
        'strong',
        null,
        children
      ) : children
    )
  );
};

exports.CardTitle = CardTitle;
var CardSubTitle = function CardSubTitle(_ref3) {
  var children = _ref3.children,
      color = _ref3.color,
      _ref3$size = _ref3.size,
      size = _ref3$size === undefined ? 'medium' : _ref3$size,
      margin = _ref3.margin,
      textAlign = _ref3.textAlign,
      truncate = _ref3.truncate,
      weight = _ref3.weight,
      _ref3$strong = _ref3.strong,
      strong = _ref3$strong === undefined ? true : _ref3$strong,
      rest = _objectWithoutProperties(_ref3, ['children', 'color', 'size', 'margin', 'textAlign', 'truncate', 'weight', 'strong']);

  return _react2.default.createElement(
    _grommet.Box,
    _extends({ direction: 'row', gap: 'small', justify: 'center', pad: 'small', flex: false }, rest),
    typeof children !== 'string' ? children : _react2.default.createElement(
      _grommet.Text,
      {
        size: size,
        margin: margin,
        textAlign: textAlign,
        truncate: truncate,
        weight: weight
      },
      strong ? _react2.default.createElement(
        'strong',
        null,
        children
      ) : children
    )
  );
};

exports.CardSubTitle = CardSubTitle;
var CardContent = function CardContent(_ref4) {
  var children = _ref4.children,
      rest = _objectWithoutProperties(_ref4, ['children']);

  return _react2.default.createElement(
    _grommet.Box,
    _extends({ overflow: 'scroll', justifySelf: 'stretch', fill: 'horizontal' }, rest),
    children
  );
};

exports.CardContent = CardContent;

var Card = function (_Component) {
  _inherits(Card, _Component);

  function Card(props, context) {
    _classCallCheck(this, Card);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

    _this.toggleInnerContent = function (showInnner) {
      var _this$props = _this.props,
          backContent = _this$props.backContent,
          onFlip = _this$props.onFlip;

      if (backContent) {
        var flipped = _this.state.flipped;

        if (flipped !== showInnner) {
          _this.setState({ flipped: showInnner }, function () {
            if (onFlip) {
              // timeout to allow event to propagate
              setTimeout(function () {
                onFlip(showInnner);
              }, 0);
            }
          });
        }
      }
    };

    _this.onHover = function (hover) {
      _this.toggleInnerContent(hover);
    };

    _this.state = { flipped: !!props.flipped };
    return _this;
  }

  Card.prototype.componentWillReceiveProps = function componentWillReceiveProps(_ref5) {
    var nextFlipped = _ref5.flipped;
    var flipped = this.state.flipped;

    if (nextFlipped !== undefined && nextFlipped !== flipped) {
      this.toggleInnerContent(nextFlipped);
    }
  };

  Card.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        align = _props.align,
        gap = _props.gap,
        children = _props.children,
        flipCard = _props.flipCard,
        theme = _props.theme,
        size = _props.size,
        backContent = _props.backContent,
        flipDuration = _props.flipDuration,
        flipOnHover = _props.flipOnHover,
        rest = _objectWithoutProperties(_props, ['align', 'gap', 'children', 'flipCard', 'theme', 'size', 'backContent', 'flipDuration', 'flipOnHover']);

    var flipped = this.state.flipped;

    var sizeWidth = void 0;
    var sizeHeight = void 0;
    if (size) {
      sizeWidth = typeof size === 'string' ? size : size.width;
      sizeHeight = typeof size === 'string' ? size : size.height;
    }
    return _react2.default.createElement(
      _StyledCard.StyledCard,
      _extends({
        theme: theme,
        sizeHeight: sizeHeight,
        sizeWidth: sizeWidth,
        overflow: 'hidden',
        justify: 'stretch'
      }, rest),
      _react2.default.createElement(
        _StyledCard.StyledCardContent,
        {
          fill: 'horizontal',
          flex: true,
          onMouseOver: flipOnHover ? function () {
            return _this2.onHover(true);
          } : undefined,
          onMouseLeave: flipOnHover ? function () {
            return _this2.onHover(false);
          } : undefined
        },
        _react2.default.createElement(
          _grommet.Stack,
          { fill: true },
          _react2.default.createElement(
            _StyledCard.StyledFlipCard,
            {
              align: align,
              gap: gap,
              show: !flipped,
              flipDuration: flipDuration
            },
            children
          ),
          backContent && _react2.default.createElement(
            _StyledCard.StyledFlipCard,
            {
              style: { overflow: 'scroll' },
              show: flipped,
              flipDuration: flipDuration
            },
            backContent
          )
        )
      )
    );
  };

  return Card;
}(_react.Component);

Card.defaultProps = {
  title: undefined,
  subTitle: undefined,
  size: { width: 'large', height: 'medium' },
  margin: 'small',
  align: 'center',
  border: 'all',
  elevation: 'small',
  pad: 'small',
  round: 'xsmall',
  flex: false,
  gap: 'small',
  titleLevel: 2,
  backContent: undefined,
  flipped: false,
  flipOnHover: true,
  flipDuration: 0.3
};


Card.propTypes = {
  subTitle: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element])
};

if (process.env.NODE_ENV !== 'production') {
  (0, _doc2.default)(Card);
}

exports.default = (0, _recompose.compose)(_hocs.withTheme)(Card);