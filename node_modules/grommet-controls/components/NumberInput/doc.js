'use strict';

exports.__esModule = true;

var _reactDesc = require('react-desc');

exports.default = function (Element) {
  var DocumentedElement = (0, _reactDesc.describe)(Element).description('A masked number input, with widgets to increment/decrement the value. Automatically converts the value to a numeric type, so you dont have to parse strings in your onChange event.\n      Additionally, all properties of MaskedInput apply\n      ').usage('\n      $ npm install grommet-controls\n \n      import { NumberInput } from \'grommet-controls\';\n\n      <NumberInput value={...} />\n    ');

  DocumentedElement.propTypes = {
    a11yIncrement: _reactDesc.PropTypes.string.description('Custom increment button title to be used by screen readers.'),
    a11yDecrement: _reactDesc.PropTypes.string.description('Custom increment button title to be used by screen readers.'),
    decimals: _reactDesc.PropTypes.number.description('How many digits to allow after the decimal.').defaultValue('null'),
    min: _reactDesc.PropTypes.number.description('Minimum value.'),
    max: _reactDesc.PropTypes.number.description('Maximum value.'),
    step: _reactDesc.PropTypes.number.description('Steps to increase and decrease by.').defaultValue('1'),
    value: _reactDesc.PropTypes.string.description('The numeric value'),
    disabled: _reactDesc.PropTypes.bool.description('Setting to true causes the input to be disabled.'),
    addIcon: _reactDesc.PropTypes.element.description('Icon for button to increment by step.'),
    subtractIcon: _reactDesc.PropTypes.element.description('Icon for button to subtract a step.'),
    prefix: _reactDesc.PropTypes.string.description('What to display in front of the value.'),
    suffix: _reactDesc.PropTypes.string.description('What to display at the end of the value.'),
    thousandsSeparatorSymbol: _reactDesc.PropTypes.string.description('A character with which to separate thousands.'),
    integers: _reactDesc.PropTypes.number.description('Limit on the length of the integer number.').defaultValue('unlimited'),
    updateToString: _reactDesc.PropTypes.bool.description('Whether pass the value as a string in the onChange event.').defaultValue('false')
  };

  return DocumentedElement;
};