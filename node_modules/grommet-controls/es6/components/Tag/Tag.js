var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { compose } from 'recompose';
import { Text, Keyboard } from 'grommet';
import { withFocus, withTheme } from 'grommet/components/hocs';
import { deepMerge } from 'grommet/utils/object';
import { FormClose } from 'grommet-icons';
import StyledTag, { StyledIcon } from './StyledTag';

import doc from './doc';

var Tag = function (_Component) {
  _inherits(Tag, _Component);

  function Tag() {
    var _temp, _this, _ret;

    _classCallCheck(this, Tag);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.clickTag = function (e) {
      var _this$props = _this.props,
          onClick = _this$props.onClick,
          disabled = _this$props.disabled;

      if (!disabled && onClick) {
        onClick(e);
      }
      e.preventDefault();
      e.stopPropagation();
    }, _this.toggleTag = function (e) {
      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          disabled = _this$props2.disabled;

      if (!disabled && onChange) {
        onChange(e);
      }
      e.preventDefault();
      e.stopPropagation();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Tag.prototype.render = function render() {
    var _props = this.props,
        disabled = _props.disabled,
        label = _props.label,
        a11yTitle = _props.a11yTitle,
        reverse = _props.reverse,
        background = _props.background,
        border = _props.border,
        theme = _props.theme,
        icon = _props.icon,
        color = _props.color,
        focusable = _props.focusable,
        round = _props.round,
        size = _props.size,
        truncate = _props.truncate,
        focus = _props.focus,
        rest = _objectWithoutProperties(_props, ['disabled', 'label', 'a11yTitle', 'reverse', 'background', 'border', 'theme', 'icon', 'color', 'focusable', 'round', 'size', 'truncate', 'focus']);

    var grommet = this.context.grommet;

    var tagBorder = deepMerge(theme.tag ? theme.tag.border : {}, border);
    var tagRound = round || (theme.tag && theme.tag.border ? theme.tag.border.round : undefined);
    var closeIcon = void 0;
    if (icon) {
      closeIcon = React.createElement(
        StyledIcon,
        { theme: theme, onClick: this.toggleTag },
        icon
      );
    }
    return React.createElement(
      Keyboard,
      {
        onEnter: this.clickTag,
        onSpace: this.toggleTag
      },
      React.createElement(
        StyledTag,
        _extends({
          direction: 'row',
          align: 'center',
          a11yTitle: a11yTitle,
          border: tagBorder,
          round: tagRound,
          onClick: this.clickTag,
          role: 'checkbox',
          'aria-checked': true,
          canFocus: focusable,
          tabIndex: disabled || !focusable ? undefined : '-1',
          background: background,
          disabled: disabled,
          reverse: reverse,
          theme: theme,
          grommet: grommet,
          focus: focus
        }, rest),
        reverse && closeIcon,
        React.createElement(
          Text,
          {
            color: color,
            size: size,
            truncate: truncate
          },
          label && label.toString()
        ),
        !reverse && closeIcon
      )
    );
  };

  return Tag;
}(Component);

Tag.contextTypes = {
  grommet: PropTypes.object
};
Tag.defaultProps = {
  label: 'Text',
  icon: React.createElement(FormClose, null),
  pad: { horizontal: 'xsmall' },
  focusable: true
};


if (process.env.NODE_ENV !== 'production') {
  doc(Tag);
}

export default compose(withFocus, withTheme)(Tag);